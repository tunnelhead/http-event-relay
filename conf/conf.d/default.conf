server {
    listen 80;
    server_name _;

    include /etc/nginx/includes/cors-headers.conf;

    location ~ "^/t/([-\w]{1,1024})/?$" {
        include /etc/nginx/includes/cors.conf;

        set $tunnel_id $1;

        # POST a message to a tunnel
        if ($request_method = POST) {
            content_by_lua_block {
                local tunnel = require "tunnel"
                tunnel.post_message()
            }
        }

        # GET a message from a tunnel
        if ($request_method = GET) {
            content_by_lua_block {
                local tunnel = require "tunnel"
                tunnel.get_message()
            }
        }
    }

    # Long polling endpoint
    location ~ "^/t/([-\w]{1,1024})/poll$" {
        include /etc/nginx/includes/cors.conf;

        set $tunnel_id $1;

        if ($request_method = GET) {
            content_by_lua_block {
                local tunnel = require "tunnel"
                tunnel.poll_message()
            }
        }
    }

    # Get length endpoint
    location ~ "^/t/([-\w]{1,1024})/len$" {
        include /etc/nginx/includes/cors.conf;

        set $tunnel_id $1;

        if ($request_method = GET) {
            content_by_lua_block {
                local tunnel = require "tunnel"
                tunnel.get_length()
            }
        }
    }

    # Message endpoint
    location ~ "^/t/([-\w]{1,1024})/(\d{1,16}-\d{1,16})/?$" {
        include /etc/nginx/includes/cors.conf;

        set $tunnel_id $1;
        set $msg_id $2;

        # Get status
        if ($request_method = GET) {
            content_by_lua_block {
                local tunnel = require "tunnel"
                tunnel.get_msg_status()
            }
        }

        # Acknowledge
        if ($request_method = DELETE) {
            content_by_lua_block {
                local tunnel = require "tunnel"
                tunnel.ack_message()
            }
        }
    }

    # Message reply endpoint
    location ~ "^/t/([-\w]{1,1024})/(\d{1,16}-\d{1,16})/reply/?$" {
        include /etc/nginx/includes/cors.conf;

        set $tunnel_id $1;
        set $msg_id $2;

        # Create reply
        if ($request_method = POST) {
            content_by_lua_block {
                local tunnel = require "tunnel"
                tunnel.post_reply()
            }
        }

        # Read reply
        if ($request_method = GET) {
            content_by_lua_block {
                local tunnel = require "tunnel"
                tunnel.get_reply()
            }
        }
    }

    # Message reply (long polling)
    location ~ "^/t/([-\w]{1,1024})/(\d{1,16}-\d{1,16})/reply/poll/?$" {
        include /etc/nginx/includes/cors.conf;

        set $tunnel_id $1;
        set $msg_id $2;

        if ($request_method = GET) {
            content_by_lua_block {
                local tunnel = require "tunnel"
                tunnel.poll_reply()
            }
        }
    }

    # Clean queue endpoint
    location ~ "^/t/([-\w]{1,1024})/all$" {
        include /etc/nginx/includes/cors.conf;

        set $tunnel_id $1;

        if ($request_method = DELETE) {
            content_by_lua_block {
                local tunnel = require "tunnel"
                tunnel.clean_queue()
            }
        }
    }

    # Default location
    location / {
        return 400 "Malformed url";
    }

    # Health check
    location /health {
        return 200 "OK";
    }

    # Static demo page
    location /demo/ {
        alias /var/www/demo/;
        index index.html;
    }
}
